"check off" shopping List application.the items you've already bought simply moves to the "Already Bought" list.

Your HTML page should display 2 lists, one titled "To Buy" and the other "Already Bought".

The "To Buy" list should be pre-populated with a list of at least 5 items. (Hint: Use an array of object literals, where each item will be similar to { name: "cookies", quantity: 10 }

 Each shopping list item is to have a name and quantity. 

t should be displayed to the user in the format of Buy item_quantity item_name. For example, shopping list item { name: "cookies", quantity: 10 } would be listed as Buy 10 cookies.

Next to each item in the list should be a button with the label "Bought"

hen the user clicks on the "Bought" button, its associated item should be removed from the "To Buy" list and appear in the "Already Bought" list.

The "Already Bought" list should initially be empty and display a message "Nothing bought yet

 Once something is "bought" and appears on this list,

the format of each item in the list should be Bought item_quantity item_name

Once the user "buys" every item on the "To Buy" list, display the message "Everything is bought!"

Your implementation should not consist of only 1 controller that does it all: take care of both lists, store the data for both lists, etc

Import AngularJS into your project and place a <script> tag right before the </body> tag.

Declare ng-app either on the html or the body element. Name your app ShoppingListCheckOff.

Create app.js in your project and declare an Angular module to match your ng-app declaration.

Go back to index.html and declare 2 controllers using controller as syntax. One controller should be called ToBuyController and the other called AlreadyBoughtController. You are required to have 2 controllers for this assignment.

using the singleton approach with the .service declaration. Call the service ShoppingListCheckOffService. Make sure to inject this service into both controllers so they can share data. Also, realize that your service will have to keep track of both 'to buy' and 'bought' items at the same time

You can store 2 separate arrays in the service: one to hold "to buy" items and one to hold "bought" items. The reference to the "to buy" array should be placed/exposed onto the ToBuyController instance as some property.

The reference to the "bought" items array should be placed/exposed onto the AlreadyBoughtController instance as some property.

When the user clicks on the "Bought" button, simply pass the call from your (ng-click) controller-bound method to call the right method inside of your ShoppingListCheckOffService service, which removes that item from the "to buy" array and pushes it to the "bought" array.

To display and/or hide the messages when the list(s) are empty, use the ng-if directive.

To loop over the items in either list use the ng-repeat directive.

Make sure all of your Javascript code is inside of an IIFE. 

Make sure all of your dependency injections are protected from minification.